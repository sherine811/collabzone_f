name: CI/CD Pipeline - Campus Portal

on:
  push:
    branches:
      - main   # Trigger when code is pushed to 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      REGISTRY_NAME: campusportalacr            # üîπ Your ACR name
      IMAGE_NAME: campus_portal_site            # üîπ Image name
      RESOURCE_GROUP: collabzone-rg             # üîπ Your Azure Resource Group
      AKS_NAME: campusportal-aks                # üîπ Your AKS cluster name
      IMAGE_TAG: latest                         # üîπ You can change to GitHub SHA if needed

    steps:
      # üß© Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # üß© Step 2: Azure Login
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # üß© Step 3: Get ACR Login Server
      - name: Get ACR Login Server
        id: acr
        run: |
          echo "ACR_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --query loginServer -o tsv)" >> $GITHUB_ENV

      # üß© Step 4: Azure Container Registry Login
      - name: Azure Container Registry Login
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      # üß© Step 5: Debug - List repository files
      - name: Debug - List repository structure
        run: ls -R ${{ github.workspace }}

      # üß© Step 6: Build and Push Docker image to ACR
      - name: Build and Push Docker image to ACR
        run: |
          IMAGE_TAG=latest
          cd ${{ github.workspace }}/campus_portal_site
          echo "üìÅ Current directory: $(pwd)"
          ls -la
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG

      # üß© Step 7: Set AKS context
      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AKS_NAME }} \
            --overwrite-existing

      # üß© Step 8: Update Deployment Image
      - name: Update Deployment Image
        run: |
          kubectl set image deployment/campusportal-deployment \
            campusportal-container=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --namespace default

      # üß© Step 9: Apply Kubernetes Manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f ${{ github.workspace }}/k8s/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/k8s/service.yaml

      # üß© Step 10: Verify Deployment
      - name: Verify Deployment
        run: |
          kubectl get pods -o wide
          kubectl get svc
